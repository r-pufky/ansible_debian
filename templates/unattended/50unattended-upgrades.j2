// Unattended-Upgrade::Origins-Pattern controls which packages are upgraded.
Unattended-Upgrade::Origins-Pattern {
{% for line in debian_unattended_upgrade_origins_pattern %}
  "{%- for k,v in line.items() %}{{ k }}={{ v }}{% if not loop.last %},{% endif %}{%- endfor %}";
{% endfor %}
};

// Python regular expressions, matching packages to exclude from upgrading.
Unattended-Upgrade::Package-Blacklist {
{% for package in debian_unattended_package_blacklist %}
  "{{ package }}";
{% endfor %}
};

// This option allows you to control if on a unclean dpkg exit.
Unattended-Upgrade::AutoFixInterruptedDpkg "{{ debian_unattended_autofix_interrupted_dpkg | default(true) | bool | string | lower }}";

// Split the upgrade into the smallest possible chunks so that
// they can be interrupted with SIGUSR1. This makes the upgrade
// a bit slower but it has the benefit that shutdown while a upgrade
// is running is possible (with a small delay)
Unattended-Upgrade::MinimalSteps "{{ debian_unattended_minimal_steps | default(true) | bool | string | lower }}";

// Install all updates when the machine is shutting down instead of doing it in
// the background while the machine is running.
Unattended-Upgrade::InstallOnShutdown "{{ debian_unattended_install_on_shutdown | default(false) | bool | string | lower }}";

// Send email to this address for problems or packages upgrades
Unattended-Upgrade::Mail "{{ debian_unattended_mail | default('') }}";

// Mail reporting threshold
Unattended-Upgrade::MailReport "{{ debian_unattended_mail_report | default('only-on-error') }}";

// Remove unused automatically installed kernel-related packages
// (kernel images, kernel headers and kernel version locked tools).
Unattended-Upgrade::Remove-Unused-Kernel-Packages "{{ debian_unattended_remove_unused_kernel_packages | default(true) | bool | string | lower }}";

// Do automatic removal of newly unused dependencies after the upgrade
Unattended-Upgrade::Remove-New-Unused-Dependencies "{{ debian_unattended_remove_new_unused_dependencies | default(true) | bool | string | lower }}";

// Do automatic removal of unused packages after the upgrade
// (equivalent to apt-get autoremove)
Unattended-Upgrade::Remove-Unused-Dependencies "{{ unattended_remove_unused_dependencies | default(false) | bool | string | lower }}";

// Automatically reboot even if there are users currently logged in
// when Unattended-Upgrade::Automatic-Reboot is set to true
Unattended-Upgrade::Automatic-Reboot-WithUsers "{{ debian_unattended_automatic_reboot_with_users | default(true) | bool | string | lower }}";

// Automatically reboot *WITHOUT CONFIRMATION* if
//  the file /var/run/reboot-required is found after the upgrade
Unattended-Upgrade::Automatic-Reboot "{{ debian_unattended_automatic_reboot | default(true) | bool | string | lower }}";

// If automatic reboot is enabled and needed, reboot at the specific
// time instead of immediately
//  Default: "now"
Unattended-Upgrade::Automatic-Reboot-Time "{{ debian_unattended_automatic_reboot_time | default('now') }}";

// Download and install upgrades only on AC power
// (i.e. skip or gracefully stop updates on battery)
Unattended-Upgrade::OnlyOnACPower "{{ debian_unattended_only_on_ac_power | default(true) | bool | string | lower }}";

// Use apt bandwidth limit feature, this example limits the download
// speed to 70kb/sec
Acquire::http::Dl-Limit "{{ debian_unattended_dl_limit | default(0) }}";

// Enable logging to syslog. Default is False
Unattended-Upgrade::SyslogEnable "{{ debian_unattended_syslog_enable | default(false) | bool | string | lower }}";

// Specify syslog facility. Default is daemon
Unattended-Upgrade::SyslogFacility "{{ debian_unattended_syslog_facility | default('daemon') }}";

// Download and install upgrades only on non-metered connection
// (i.e. skip or gracefully stop updates on a metered connection)
Unattended-Upgrade::Skip-Updates-On-Metered-Connections "{{ debian_unattended_skip_updates_on_metered_connections | default(true) | bool | string | lower }}";

// Verbose logging
Unattended-Upgrade::Verbose "{{ debian_unattended_verbose | default(false) | bool | string | lower }}";

// Print debugging information both in unattended-upgrades and
// in unattended-upgrade-shutdown
Unattended-Upgrade::Debug "{{ debian_unattended_debug | default(false) | bool | string | lower }}";

// Allow package downgrade if Pin-Priority exceeds 1000
Unattended-Upgrade::Allow-downgrade "{{ debian_unattended_allow_downgrade | default(false) | bool | string | lower }}";

// When APT fails to mark a package to be upgraded or installed try adjusting
// candidates of related packages to help APT's resolver in finding a solution
// where the package can be upgraded or installed.
// This is a workaround until APT's resolver is fixed to always find a
// solution if it exists. (See Debian bug #711128.)
// The fallback is enabled by default, except on Debian's sid release because
// uninstallable packages are frequent there.
// Disabling the fallback speeds up unattended-upgrades when there are
// uninstallable packages at the expense of rarely keeping back packages which
// could be upgraded or installed.
Unattended-Upgrade::Allow-APT-Mark-Fallback "{{ debian_unattended_allow_apt_mark_fallback | default(true) | bool | string | lower }}";
